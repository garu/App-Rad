=head1 NAME

App::Rad::FAQ - Frequently Asked Questions about Rad

=head1 FREQUENTLY ASKED QUESTIONS

=head2 How do I name my commands with the same name as reserved subs like "setup", "pre_process", etc?

The fact that they are reserved subroutine names just means you don't get to call them that internally (i.e. I<inside> your code). You can still name your commands whatever you feel like with C<< $c->register >> or C<< $c->register_commands() >>:

   sub setup {
       my $c = shift;
       $c->register_commands({ 'setup' => \&my_setup_command });
   }
   
   sub my_setup_command {
       ...
   }


=head2 I added a post_process and now my app does not show any help messages! What's wrong?

B<Short answer:> If you wish to print anything returned by commands (including Rad's automatic 'help' command), make sure to call C<< $c->post_process >> at the end of your own post_process sub.

B<Long answer:> As you may know, Rad stores returned values from commands on C<< $c->output >>, and leaves all output treatment to post_process. This enables you to manipulate the output of your commands as you see fit (such as mailing them, adding them to a database, parsing it into a specific format, etc). If you override C<post_process>, you need to remember to actually print the output afterwards. This can easily be acomplished with:

   if ($c->output) {
       print $c->output . "\n";
   }

Since this is Rad's standard post_process, an easier (and perhaps more elegant) way of acomplishing the same result is simply calling C<< $c->post_process >> on the last line of your routine, like so:

   sub post_process {
       my $c = shift;

       ...  # do your own processing

       $c->post_process;
   }

Naturally, Rad's automatic help mechanism also forwards its output to post_process (so you can also manipulate it at will before printing). If you wish to selectively print C<< $c->output >> only if the command was 'help', you can do just that:

  sub post_process {
      my $c = shift;

      if ($c->cmd eq 'help') {
          print $c->output . "\n";
      }
      else {
          # manipulate output at will
      }
  }

You can also catch commandless calls to your program doing C<< if (!$c->cmd) >> and easily combine it with the example above.


=head2 How do I disable the "help" command?

The "help" command is registered by Rad automatically. To disable it, just unregister it at any point in your code (this is usually done at "setup"):

   sub setup {
       my $c = shift;
       $c->unregister('help');
       
       # since you're overriding 'setup', make sure
       # you register your App's commands!
       $c->register_commands(); 
   }

=head2 How do I explicitly call Rad's internal "help" command?

TODO

=head2 Help! Rad thinks imported functions from other modules are commands!

B<Short answer:> Just use C<< namespace::autoclean >> in your programs.

B<Long answer:> Rad looks into your namespace at I<runtime> for commands. So whatever functions you have in there will show as commands. Florian Ragwitz's excellent L<< namespace::autoclean >> keeps all imports out of your namespace at I<compile time>, so they still work inside your app but won't be turned into commands.

To help illustrate, here is a Rad program that imports (and uses) some outisde functions:

  use App::Rad;
  
  # load auxiliary modules
  use Data::Dumper;
  use Scalar::Util qw(looks_like_number);
  use List::MoreUtils qw(any);
  
  # make everything clean for Rad
  use namespace::autoclean;
  
  App::Rad->run;
  
  sub somecommand {
     my $c = shift;
  
     if ( any { looks_like_number($_) } @{ $c->argv } ) {
        return Dumper $c->options;
     }
     else {
        return 'try setting a numeric arg and some options!';
     }
  }

If you remove the C<< use namespace::autoclean >> call, then 'Dumper', 'any' and 'looks_like_number' will all appear as commands, which is not what you want. Alternatively, you can prevent importing by adding a C<< () >> next to each C<use> call, or go with C<require> instead. See L<use> and L<require> for more information on package loading.
